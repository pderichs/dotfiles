#!/usr/bin/env perl

use strict;
use warnings;
use Cwd qw();
use File::Spec;
use Term::ANSIColor;

my $op=$ARGV[0];

if(not defined $op) {
  die "No op provided. Exiting.\n";
}

# my $binfolder="$ENV{HOME}/bin";
# if ( !-d $binfolder ) {
#     mkdir $binfolder or die "Failed to create folder: $binfolder";
# }

my $path = Cwd::cwd();

my %links = (
  "doom" => "$ENV{HOME}/.config/doom",
  "tool-versions" => "$ENV{HOME}/.tool-versions",
  "zshrc" => "$ENV{HOME}/.zshrc",
  "ideavimrc" => "$ENV{HOME}/.ideavimrc",
  "tmux.conf" => "$ENV{HOME}/.tmux.conf",
  "gitconfig" => "$ENV{HOME}/.gitconfig",
  "gitexcludes" => "$ENV{HOME}/.gitexcludes",
  "rspec" => "$ENV{HOME}/.rspec",
  "terminator_config" => "$ENV{HOME}/.config/terminator/config",
  "lynxrc" => "$ENV{HOME}/.lynxrc",
  "gdbinit" =>  "$ENV{HOME}/.gdbinit",
  "ctags/nim.ctags" => "$ENV{HOME}/.ctags.d/nim.ctags",
  "shell" => "$ENV{HOME}/.shell",
  "bashrc" => "$ENV{HOME}/.bashrc",
  "neovim/init.lua" => "$ENV{HOME}/.config/nvim/init.lua",
  "bin/todofile" => "$ENV{HOME}/bin/todofile",
  "bin/docxgrep" => "$ENV{HOME}/bin/docxgrep",
  "bin/onlymd5" => "$ENV{HOME}/bin/onlymd5",
  "bin/md5allfiles" => "$ENV{HOME}/bin/md5allfiles",
  "bin/starttmux" => "$ENV{HOME}/bin/starttmux",
  "bin/dfcollect" => "$ENV{HOME}/bin/dfcollect",
  "ripgreprc" => "$ENV{HOME}/.ripgreprc",
  "rofi" => "$ENV{HOME}/.config/rofi/config.rasi",
  "kitty" => "$ENV{HOME}/.config/kitty/kitty.conf",
  "vscode_settings.json" => "$ENV{HOME}/.config/Code/User/settings.json",
);

my @sources = keys %links;

if($op eq "install") {
  print("Installing...\n");

  for my $src (@sources) {
    my $source_path = "$path/$src";
    my $dest_path = $links{$src};

    # Check whether folder exists
    my ($volume, $directory, $file) = File::Spec->splitpath($dest_path);
    mkdir($directory, 0700);

    print("  creating symlink for $source_path -> $dest_path...\n");

    if(-e $source_path) {
      if(symlink($source_path, $dest_path)) {
        print color('green');
        print("    created.");
        print color('reset');
      } else {
        print color('red');
        print("    not created.");
        print color('reset');
      }
    } else {
      print color('red');
      print("  not created: source path does not exist.");
      print color('reset');
    }

    print("\n");
  }
} elsif($op eq "uninstall") {
  print "Uninstalling...\n";

  for my $src (@sources) {
    my $source_path = "$path/$src";
    my $dest_path = $links{$src};

    if (-l $dest_path) {
      print("  checking symlink for $dest_path (expecting $source_path)...\n");
      my $actual_link_goal = readlink($dest_path);
      if (not $actual_link_goal eq $source_path) {
        print("    ($dest_path symlink points to something else - ignoring.)\n");
      } else {
        print("-> Deleting symlink $dest_path...\n");
        unlink $dest_path
            or print("  Failed to remove file $dest_path: $!\n");
      }
    } else {
      print("  ($dest_path does not seem to be a link - ignoring.)\n");
    }
  }
} elsif($op eq "status") {
  print("Status check...\n");

  my $status_ok = 1;
  my $sources_size = @sources;
  my $source_ok_count = 0;

  print("\n");

  for my $src (@sources) {
    my $source_path = "$path/$src";
    my $dest_path = $links{$src};

    if (-l $dest_path) {
      my $actual_link_goal = readlink($dest_path);

      if (not $actual_link_goal eq $source_path) {
        $status_ok = 0;
      } else {
        $source_ok_count++;
      }

      if ($status_ok == 0) {
        print color('red');
      } else {
        print color('green');
      }
      print("$dest_path -> $actual_link_goal\n");
    } else {
      print color('red');
      print("$dest_path -> (not a symlink)\n");
    }

    print color('reset');
  }

  print("\n");

  if($status_ok == 1 && $source_ok_count == $sources_size) {
    print("Looks good!");
  } else {
    print("Something is off...");
  }

  print("\n\n");
} else {
  die "Please provide a valid command.\n";
}
